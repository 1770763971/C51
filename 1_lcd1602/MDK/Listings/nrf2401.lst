C51 COMPILER V9.57.0.0   NRF2401                                                           03/12/2020 20:51:00 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE NRF2401
OBJECT MODULE PLACED IN .\Objects\nrf2401.obj
COMPILER INVOKED BY: C:\Program\Keil_v5\C51\BIN\C51.EXE ..\..\Libraries\Libraries\nrf2401.c OMF2 OPTIMIZE(8,SPEED) BROWS
                    -E INCDIR(..\..\Libraries\Common;..\..\Libraries\Libraries;..\CODE;..\USER) DEBUG PRINT(.\Listings\nrf2401.lst) OBJECT(.\
                    -Objects\nrf2401.obj)

line level    source

   1          //**********************************
   2          //   NRF24L01+模块发射程序
   3          //      用8个LED调试
   4          //   Txz001 2012.05.16
   5          //**********************************
   6          #include "common.h"
   7          #include "key.h"
   8          #include "delay.h"
   9          #include "nrf2401.h"
  10          
  11          
  12          
  13          
  14          extern uchar KeyValue1;
  15          
  16          //*********************NRF24L01函数定义****************************
  17          
  18          sbit CE=P1^0;
  19          sbit CSN =P3^7;
  20          sbit SCK =P3^6;
  21          sbit MOSI =P2^2;
  22          sbit MISO =P2^0;
  23          sbit IRQ =P3^3;
  24          
  25          sbit led2=P2^1;
  26          sbit led1 =P2^0;
  27          
  28          //*****************NRF24L01常量**********************
  29          #define TX_ADR_WIDTH    5    //发送地址宽度 5字节
  30          #define RX_ADR_WIDTH    5    //接收地址宽度 5字节
  31          #define TX_PLOAD_WIDTH  32   //发送数据宽度 32字节
  32          #define RX_PLOAD_WIDTH  32   //接收数据的宽度 32字节
  33          uchar const TX_ADDRESS[TX_ADR_WIDTH]= {0xff,0xff,0xff,0xff,0xff}; //本地地址
  34          uchar const RX_ADDRESS[RX_ADR_WIDTH]= {0xff,0xff,0xff,0xff,0xff}; //接收地址
  35          //*****************NRF24L01寄存器指令*******************
  36          #define READ_REG        0x00   // 读寄存器指令
  37          #define WRITE_REG       0x20  // 写寄存器指令
  38          #define RD_RX_PLOAD     0x61   // 读取接收数据指令
  39          #define WR_TX_PLOAD     0xA0   // 写待发数据指令
  40          #define FLUSH_TX        0xE1   //清空发送缓冲区
  41          //**************SPI(nRF24L01)寄存器地址常量*****************
  42          #define CONFIG          0x00  // 配置收发状态，CRC校验模式以及收发状态响应方式
  43          #define EN_AA           0x01  // 自动应答功能设置
  44          #define EN_RXADDR       0x02  // 可用信道设置
  45          #define SETUP_AW        0x03  // 收发地址宽度设置
  46          #define SETUP_RETR      0x04  // 自动重发功能设置
  47          #define RF_CH           0x05  // 工作频率设置
  48          #define RF_SETUP        0x06  // 发射速率、功耗功能设置
  49          #define STATUS          0x07  // 状态寄存器
  50          #define OBSERVE_TX      0x08  // 发送监测功能
  51          #define CD              0x09  // 地址检测            
  52          #define RX_ADDR_P0      0x0A  // 频道0接收数据地址
  53          #define RX_ADDR_P1      0x0B  // 频道1接收数据地址
C51 COMPILER V9.57.0.0   NRF2401                                                           03/12/2020 20:51:00 PAGE 2   

  54          #define RX_ADDR_P2      0x0C  // 频道2接收数据地址
  55          #define RX_ADDR_P3      0x0D  // 频道3接收数据地址
  56          #define RX_ADDR_P4      0x0E  // 频道4接收数据地址
  57          #define RX_ADDR_P5      0x0F  // 频道5接收数据地址
  58          #define TX_ADDR         0x10  // 发送地址寄存器
  59          #define RX_PW_P0        0x11  // 接收频道0接收数据长度
  60          #define RX_PW_P1        0x12  // 接收频道0接收数据长度
  61          #define RX_PW_P2        0x13  // 接收频道0接收数据长度
  62          #define RX_PW_P3        0x14  // 接收频道0接收数据长度
  63          #define RX_PW_P4        0x15  // 接收频道0接收数据长度
  64          #define RX_PW_P5        0x16  // 接收频道0接收数据长度
  65          #define FIFO_STATUS     0x17  // FIFO栈入栈出状态寄存器设置
  66          
  67          /**********************************************
  68          /*函数：uint SPI_RW(uint uchar)
  69          /*功能：NRF24L01的SPI写时序
  70          /**********************************************/
  71          uchar SPI_RW(uchar uuchar)
  72          {
  73   1      uchar bit_ctr;
  74   1          for(bit_ctr=0;bit_ctr<8;bit_ctr++) // 输出8个位
  75   1          {
  76   2        MOSI = (uuchar & 0x80);     //输出uuhar的最高位
  77   2        uuchar = (uuchar << 1);     //左移一位
  78   2        SCK = 1;                    // 将时钟线置‘1’
  79   2        uuchar |= MISO;             //同时读取STATUS
  80   2        SCK = 0;                //然后再将时钟线置‘0’
  81   2          }
  82   1          return(uuchar);               //返回读取的值
  83   1      }
  84          /***********************************************
  85          /*函数：uchar SPI_Read(uchar reg)
  86          /*功能：NRF24L01的SPI读取一个字节时序
  87          /***********************************************/
  88          uchar SPI_Read(uchar reg)
  89          {
  90   1      uchar reg_val;
  91   1      CSN = 0;             //CSN置'0',允许指令操作
  92   1      SPI_RW(reg);            //写一条reg指令
  93   1      reg_val = SPI_RW(0);    //读取reg的值到reg_val
  94   1      CSN = 1;                //CSN置'1',禁示操作
  95   1      return(reg_val);        //返回读取的值
  96   1      }
  97          /***********************************************
  98          /*功能：NRF24L01写一个字节到寄存器函数
  99          /***********************************************/
 100          uchar SPI_RW_Reg(uchar reg, uchar value)
 101          {
 102   1      uchar status;
 103   1        
 104   1      CSN = 0;                   // CSN置'0',允许操作
 105   1      status = SPI_RW(reg);      //这指令，并读STATUS
 106   1      SPI_RW(value);             //写数据值到reg
 107   1      CSN = 1;                   // CSN置'1',禁止操作
 108   1      return(status);            // return nRF24L01 status uchar
 109   1      }
 110          /*****************************************************************
 111          /*函数：uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars)
 112          /*功能: 用于写数据：reg:为寄存器地址，
 113          /*                  pBuf：为待写入数据地址，
 114          /*                  uchars：写入数据的个数
 115          /*****************************************************************/
C51 COMPILER V9.57.0.0   NRF2401                                                           03/12/2020 20:51:00 PAGE 3   

 116          uchar SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars)
 117          {
 118   1      uchar status,uchar_ctr;
 119   1      CSN = 0;            //SPI使能        
 120   1      status = SPI_RW(reg);   
 121   1      for(uchar_ctr=0; uchar_ctr<uchars; uchar_ctr++) //
 122   1        SPI_RW(*pBuf++);
 123   1      CSN = 1;           //关闭SPI
 124   1      return(status);    //  
 125   1      }
 126          //******************************************
 127          /*NRF24L01初始化
 128          //******************************************/
 129          void init_NRF24L01(void)
 130          {
 131   1        delayms(1);
 132   1        CE=0;    //  射频停止工作
 133   1        CSN=1;   // 停止寄存器读写
 134   1        SCK=0;   //时种信号停止读写
 135   1        IRQ=1;//中断复位
 136   1        SPI_RW_Reg(WRITE_REG + EN_AA, 0x00);      //  频道0自动 ACK应答禁止  
 137   1        SPI_RW_Reg(WRITE_REG + SETUP_RETR, 0x00);      //禁止自动发送
 138   1        SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  //  允许接收地址只有频道0，   
 139   1        SPI_RW_Reg(WRITE_REG + RF_CH, 1);        //   设置信道工作为2.4GHZ，收发必须一致
 140   1        SPI_RW_Reg(WRITE_REG + RX_PW_P0, RX_PLOAD_WIDTH); //设置接收数据长度，本次设置为32字节
 141   1        SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x07);     //设置发射速率为2MHZ，发射功率为最大值0dB  
 142   1      }
 143          /******************************************************
 144          /*函数：void nRF24L01_TxPacket(unsigned char * tx_buf)
 145          /*功能：发送 tx_buf中数据
 146          /*******************************************************/
 147          void nRF24L01_TxPacket(unsigned char * tx_buf)
 148          {
 149   1      CE=0;   //StandBy I模式  
 150   1      SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);    // 写本地地址  
 151   1      SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // 装载接收端地址
 152   1      SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH);// 装载数据  
 153   1      SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);      // IRQ收发完成中断响应，16位CRC，主发送
 154   1      CE=1;   //置高CE，激发数据发送
 155   1      delayms(1);
 156   1      led2=~led2;
 157   1      }
 158          
 159          
 160          
 161          
 162          
 163          
 164          
 165          
 166          
 167          
 168          
 169          
 170          
 171          #define GPIO_KEY P1
 172          #define GPIO_DIG P0
 173          
 174          uchar KeyValue1;
 175          
 176          
 177          
C51 COMPILER V9.57.0.0   NRF2401                                                           03/12/2020 20:51:00 PAGE 4   

 178          int KEYDOWN1()
 179          {
 180   1              uchar a=0;
 181   1              GPIO_KEY=0x0f;   //0000 1111 初始状态  高四位0  低四位1
 182   1              if(GPIO_KEY!=0x0f) //判断是否按下
 183   1              {
 184   2                      delay(1000);   //消抖
 185   2                      if (GPIO_KEY!=0x0f)      //再次判断
 186   2                      {
 187   3                              GPIO_KEY=0x0f;   //保险起见重新赋值     0000 1111
 188   3                              switch (GPIO_KEY)
 189   3                              {                                                                //测试列
 190   4                                      case 0x07:KeyValue1=0;break;     // 0000 0111
 191   4                                      case 0x0b:KeyValue1=1;break;     // 0000 1011
 192   4                                      case 0x0d:KeyValue1=2;break;     // 0000 1101
 193   4                                      case 0x0e:KeyValue1=3;break;     // 0000 1110
 194   4                              }
 195   3                              GPIO_KEY=0xf0;   //重新赋值     1111 0000
 196   3                              switch (GPIO_KEY)
 197   3                              {                                                                                 //测试行
 198   4                                      case 0x70:KeyValue1=KeyValue1;break;      // 0111 0000
 199   4                                      case 0xb0:KeyValue1=KeyValue1+4;break;  // 1011 0000
 200   4                                      case 0xd0:KeyValue1=KeyValue1+8;break;  // 1101 0000
 201   4                                      case 0xe0:KeyValue1=KeyValue1+12;break; // 1110 0000
 202   4                              }
 203   3                              while ((a<10)&&(GPIO_KEY!=0xf0))          //按键松开的判断
 204   3                              {
 205   4                                      delay(1000);
 206   4                                      a++;
 207   4                              }
 208   3                              
 209   3                      }
 210   2              }
 211   1              return (KeyValue1);
 212   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    355    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
